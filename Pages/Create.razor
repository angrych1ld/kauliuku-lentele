@page "/create"
@inject ILocalStorageService localStorage
@inject NavigationManager nav

<h1>Naujas Žaidimas</h1>
@if (loading)
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else
{
    <div class="form-group">
        <label for="count-select">Žaidėjai:</label>
        <select class="form-control" @bind="@playerCount">
            <option value="1">Vienas</option>
            <option value="2">Du</option>
            <option value="3">Trys</option>
            <option value="4">Keturi</option>
            <option value="5">Penki</option>
            <option value="6">Šeši</option>
            <option value="7">Septyni</option>
            <option value="8">Aštuoni</option>
            <option value="9">Devyni</option>
            <option value="10">Dešimt</option>
            <option value="11">Vienuolika</option>
            <option value="12">Dvylika</option>
        </select>
    </div>
    <div class="row">
        @for (int i = 0; i < playerNames.Count; i++)
        {
            int index = i;
            <div class="col-12 col-md-6 col-lg-3">
                <input type="text" class="form-control" @bind-value="@playerNames[index]" placeholder="Žaidėjo vardas" />
            </div>
        }
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-success mt-3" @onclick="OnConfirmClick">Sukurti</button>
        </div>
    </div>
    @if (formError != null)
    {
        <div class="alert alert-danger mt-3" role="alert">
            @formError
        </div>
    }

}

@code {
    private bool loading = true;
    private string errorMessage = null;
    private UserState userState;


    private string formError;

    private string _playerCount = "1";
    private string playerCount
    {
        get { return _playerCount; }
        set { _playerCount = value; PlayerCountChanged(); }
    }
    private List<string> playerNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userState = await UserState.Load(localStorage);
        }
        catch
        {
            errorMessage = "Įvyko klaida!";
        }

        loading = false;
        PlayerCountChanged();
    }

    private void PlayerCountChanged()
    {
        Console.WriteLine("as");
        formError = null;

        int pCount = 0;
        if (int.TryParse(playerCount, out int count))
        {
            pCount = count;
        }

        while (playerNames.Count > pCount)
        {
            playerNames.RemoveAt(playerNames.Count - 1);
        }
        while (playerNames.Count < pCount)
        {
            playerNames.Add("");
        }

        StateHasChanged();
    }

    private async Task OnConfirmClick()
    {
        formError = null;

        if (playerNames.Count <= 0 || playerNames.Count > 12)
        {
            formError = "Žaidėjų skaičius turi būti tarp 1 ir 12";
            return;
        }
        else if (playerNames.Any(n => n == null || n.Length == 0 || n.Length > 30))
        {
            formError = "Kiekvieno žaidėjo vardas turi būti tarp 1 ir 30 simbolių ilgio";
            return;
        }

        userState.CreateGame(playerNames.ToArray());
        await userState.Save(localStorage);
        nav.NavigateTo("/");
    }
}
