@page "/play/{ID:int}"
@inject ILocalStorageService localStorage


@if (loading)
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table mt-2 text-center table-bordered table-dark">
            <thead>
                <tr>
                    @foreach (UserColumn col in game.UserColumns)
                    {
                        <th colspan="@GameDef.Grid.GetLength(1)" class="@(game.UserColumns.Last() != col ? "big-border-right" : "")">
                            <h3 class="m-0 p-0">
                                @col.UserName
                                <br />
                                @col.Score
                            </h3>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < GameDef.Grid.GetLength(0); i++)
                {
                    int local_i = i;
                    <tr>
                        @for (int j = 0; j < game.UserColumns.Length; j++)
                        {
                            int local_j = j;
                            @for (int k = 0; k < GameDef.Grid.GetLength(1); k++)
                            {
                                int local_k = k;
                                <td class="@(SelectCellClass(local_j, local_i, local_k))">
                                    <select class="@SelectClass(local_j, local_i, local_k)"
                                            @bind="game.UserColumns[local_j].GameValues[local_k + local_i * GameDef.Grid.GetLength(1)]"
                                            @bind:event="oninput"
                                            @onchange="@(() => OnSelectInput(local_j, local_i, local_k))">
                                        @for (int z = 0; z < GameDef.Grid[i, k].PossibleStates.Length; z++)
                                        {
                                            int local_z = z;
                                            <option value="@local_z">@GameDef.Grid[i, k].PossibleStates[z].Name</option>
                                        }
                                    </select>
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter] public int ID { get; set; }

    private bool loading = true;
    private string errorMessage = null;
    private UserState userState;
    private Game game;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userState = await UserState.Load(localStorage);
            game = userState.Games.FirstOrDefault(g => g.ID == ID);

            foreach (UserColumn col in game.UserColumns)
            {
                col.RecalculateScore();
            }

            if (game == null)
            {
                errorMessage = "Nepavyko rasti žaidimo!";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = "Įvyko klaida!";
        }

        loading = false;
    }

    private async Task OnSelectInput(int playerIndex, int rowIndex, int colIndex)
    {
        RecalculateBonusStates();

        userState.Save(localStorage).ConfigureAwait(false);

        foreach (UserColumn col in game.UserColumns)
        {
            col.RecalculateScore();
        }
    }

    private void RecalculateBonusStates()
    {
        // Handle vertical ones first
        for (int k = 0; k < game.UserColumns.Length; k++)
        {
            for (int j = 0; j < GameDef.Grid.GetLength(1) - 1; j++)
            {
                if (!HasPoints(k, GameDef.Grid.GetLength(0) - 1, j))
                {
                    bool shouldBeMinus = AnyOtherPlayerHasPoints(k, GameDef.Grid.GetLength(0) - 1, j) || HasMinus(k, j, false);
                    if (shouldBeMinus != GridCellStateName(k, GameDef.Grid.GetLength(0) - 1, j).Equals("X"))
                    {
                        game.UserColumns[k].GameValues[j + (GameDef.Grid.GetLength(0) - 1) * GameDef.Grid.GetLength(1)] =
                            shouldBeMinus
                                ? GameDef.LastStateValue(GameDef.Grid.GetLength(0) - 1, j)
                                : 0;

                        StateHasChanged();
                    }
                }
            }
        }

        // Now do horizontal ones
        for (int k = 0; k < game.UserColumns.Length; k++)
        {
            for (int i = 0; i < GameDef.Grid.GetLength(0); i++)
            {
                if (!HasPoints(k, i, GameDef.Grid.GetLength(1) - 1))
                {
                    bool shouldBeMinus = AnyOtherPlayerHasPoints(k, i, GameDef.Grid.GetLength(1) - 1) || HasMinus(k, i, true);
                    if (shouldBeMinus != GridCellStateName(k, i, GameDef.Grid.GetLength(1) - 1).Equals("X"))
                    {
                        game.UserColumns[k].GameValues[GameDef.Grid.GetLength(1) - 1 + i * GameDef.Grid.GetLength(1)] =
                            shouldBeMinus
                                ? GameDef.LastStateValue(i, GameDef.Grid.GetLength(1) - 1)
                                : 0;

                        StateHasChanged();
                    }
                }
            }
        }
    }

    private string GridCellStateName(int playerIndex, int rowIndex, int colIndex)
    {
        return GameDef.Grid[rowIndex, colIndex].PossibleStates[
            game.UserColumns[playerIndex].GameValues[colIndex + rowIndex * GameDef.Grid.GetLength(1)]].Name;
    }

    private bool AnyOtherPlayerHasPoints(int playerIndex, int rowIndex, int colIndex)
    {
        for (int i = 0; i < game.UserColumns.Length; i++)
        {
            if (i != playerIndex && HasPoints(i, rowIndex, colIndex))
            {
                return true;
            }
        }

        return false;
    }

    private bool HasPoints(int playerIndex, int rowIndex, int colIndex)
    {
        return int.TryParse(GridCellStateName(playerIndex, rowIndex, colIndex), out int can);
    }

    private bool HasMinus(int playerIndex, int rowColIndex, bool isRow)
    {
        if (isRow)
        {
            for (int j = 0; j < GameDef.Grid.GetLength(1) - 1; j++)
            {
                if (GridCellStateName(playerIndex, rowColIndex, j).StartsWith("-") || GridCellStateName(playerIndex, rowColIndex, j).StartsWith("X"))
                {
                    return true;
                }
            }
        }
        else
        {
            for (int i = 0; i < GameDef.Grid.GetLength(0) - 1; i++)
            {
                if (GridCellStateName(playerIndex, i, rowColIndex).StartsWith("-") || GridCellStateName(playerIndex, i, rowColIndex).StartsWith("X"))
                {
                    return true;
                }
            }
        }

        return false;
    }

    private string SelectClass(int playerIndex, int rowIndex, int colIndex)
    {
        string c = "table-select";
        if (game.UserColumns[playerIndex].GameValues[colIndex + rowIndex * GameDef.Grid.GetLength(1)] == 0)
        {
            c += " unplayed";
        }
        return c;
    }

    private string SelectCellClass(int playerIndex, int rowIndex, int colIndex)
    {
        string c = "select-cell p-0";

        if (game.UserColumns[playerIndex].GameValues[colIndex + rowIndex * GameDef.Grid.GetLength(1)] != 0)
        {
            CellState state = GameDef.Grid[rowIndex, colIndex].PossibleStates[game.UserColumns[playerIndex].GameValues[colIndex + rowIndex * GameDef.Grid.GetLength(1)]];
            if (state.Name.Contains("-") || state.Name.Contains("X"))
            {
                c += " fail";
            }
            else
            {
                c += " success";
            }
        }
        else
        {
            c += " unplayed";
        }

        if (playerIndex != game.UserColumns.Length - 1 && colIndex == GameDef.Grid.GetLength(1) - 1)
        {
            c += " big-border-right";
        }

        if (rowIndex == 6 || rowIndex == 9)
        {
            c += " big-border-top";
        }

        return c;
    }
}
